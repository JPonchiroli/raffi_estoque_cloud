<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Listar Fornecedores</title>

    <link rel="stylesheet" href="https://cdn.datatables.net/2.3.1/css/dataTables.dataTables.min.css">
    <link rel="stylesheet" href="/styles/listar.css">
</head>

<body>
    <header>
        <h1>Listar Fornecedores</h1>
        <h2>Acompanhe aqui o cadadastro de todos os seus fornecedores</h2>
    </header>

    <main>
        <section class="tabela-container">
            <table id="tabela" class="display">
                <thead>
                    <tr>
                        <th>Código Fornecedores</th>
                        <th>Nome Fornecedor</th>
                        <th>Cnpj</th>
                        <th>Email</th>
                        <th>Telefone</th>
                        <th>CEP</th>
                        <th>Cidade</th>
                        <th>Bairro</th>
                        <th>Rua</th>
                        <th>Número Rua</th>
                        <th>Complemento</th>
                        <th>UF</th>
                        <th>Ações</th>
                    </tr>
                </thead>
            </table>
        </section>


        <div class="button-group">
            <button onclick="window.location.href='/'">Voltar</button>
        </div>
    </main>

    <footer>
        <p>&copy; 2025 Raffi Estoque</p>
    </footer>
</body>


<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="http://cdn.datatables.net/2.3.1/js/dataTables.min.js"></script>
<script>
    let table = new DataTable('#tabela', {
        language: {
            decimal: ",",
            thousands: ".",
            search: "Buscar:",
            lengthMenu: "Mostrar _MENU_ registros por página",
            zeroRecords: "Nenhum fornecedor encontrado",
            info: "Mostrando _START_ a _END_ de _TOTAL_ registros",
            infoEmpty: "Nenhum registro disponível",
            infoFiltered: "(filtrado de _MAX_ registros no total)",
            paginate: {
                first: "Primeira",
                last: "Última",
                next: "Próxima",
                previous: "Anterior"
            },
            emptyTable: "Nenhum fornecedor cadastrado"
        }
    });

    window.onload = () => {
        fetch('/fornecedores/listar-fornecedores-backend')
            .then(res => res.json())
            .then(data => {
                if (data && Array.isArray(data)) {
                    const table = $('#tabela').DataTable();

                    data.forEach(fornecedor => {
                        const row = [
                            fornecedor.codFornecedor || '',
                            fornecedor.nomeFornecedor || '',
                            fornecedor.cnpj || 'Não informado',
                            fornecedor.email || 'Não informado',
                            fornecedor.telefone || 'Não informado',
                            fornecedor.cep || 'Não informado',
                            fornecedor.cidade || 'Não informado',
                            fornecedor.bairro || 'Não informado',
                            fornecedor.rua || 'Não informado',
                            fornecedor.numeroRua || 'Não informado',
                            fornecedor.complemento || 'Não informado',
                            fornecedor.uf || 'Não informado',
                            `<button class="btn-excluir" data-id="${fornecedor.codFornecedor}">Excluir</button> 
                            <button class="btn-editar" data-id="${fornecedor.codFornecedor}">Editar</button>`
                        ];

                        const newRow = table.row.add(row).draw().node();

                        const headers = [
                            'Código Fornecedor', 'Nome Fornecedor', 'CNPJ', 'Email', 'Telefone', 'CEP', 'Cidade',
                            'Bairro', 'Rua', 'Número Rua', 'Complemento', 'UF', 'Ações'
                        ];

                        $(newRow).find('td').each(function (index) {
                            $(this).attr('data-label', headers[index]);
                        });
                    });
                } else {
                    console.error('Erro ao buscar fornecedores:', data.error || 'Resposta inesperada');
                }
            })
            .catch(error => {
                console.error('Erro de requisição:', error);
            });
    };

    // Excluir fornecedor
    $('#tabela').on('click', '.btn-excluir', function () {
        const id = $(this).data('id');

        if (confirm('Deseja realmente excluir este fornecedor?')) {
            fetch(`/fornecedores/deletar-fornecedor-backend/${id}`, { method: 'DELETE' })
                .then(res => {
                    if (!res.ok) throw new Error('Erro ao excluir');
                    return res.json();
                })
                .then(() => {
                    alert('Fornecedor excluído com sucesso!');
                    $('#tabela').DataTable().row($(this).parents('tr')).remove().draw();
                })
                .catch(err => {
                    console.error('Erro:', err);
                    alert('Erro ao excluir fornecedor.');
                });
        }
    });

    // Editar / Confirmar atualização
    $('#tabela').on('click', '.btn-editar', function () {
        const $btn = $(this);
        const $row = $btn.closest('tr');
        const rowIdx = table.row($row).index();

        
        const normalizar = (valor) => {
            if (!valor || valor === "Não informado") return null;
            return valor.trim();
        };

        if ($btn.text() === 'Editar') {
            const editableIndexes = [1, 2, 3, 4, 5, 9, 10]; // colunas editáveis
            editableIndexes.forEach(i => {
                const td = $row.find('td').eq(i);
                const val = td.text();
                td.html(`<input type="text" value="${val}" />`);
            });

            $btn.text('Confirmar');
            $btn.after(`<button class="btn-cancelar" data-id="${$btn.data('id')}">Cancelar</button>`);
        } else {
            const id = $btn.data('id');

                const nomeFornecedor = $row.find('td').eq(1).find('input').val();
                const cnpj = $row.find('td').eq(2).find('input').val();
                const email = $row.find('td').eq(3).find('input').val();
                const telefone = $row.find('td').eq(4).find('input').val();
                const cep = $row.find('td').eq(5).find('input').val();
                const numeroRua = $row.find('td').eq(9).find('input').val();
                const complemento = $row.find('td').eq(10).find('input').val();

            const dadosAtualizados = {
                nomeFornecedor: normalizar(nomeFornecedor),
                cnpj: normalizar(cnpj),
                email: normalizar(email),
                telefone: normalizar(telefone),
                cep: normalizar(cep),
                numeroRua: normalizar(numeroRua),
                complemento: normalizar(complemento)
            }


            fetch(`/fornecedores/atualizar-fornecedor-backend/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(dadosAtualizados)
            })
                .then(res => {
                    if (!res.ok) throw new Error('Erro ao atualizar');
                    return res.json();
                })
                .then(() => {
                    // Atualizar células no DataTables
                    table.cell(rowIdx, 1).data(dadosAtualizados.nomeFornecedor || "Não informado");
                    table.cell(rowIdx, 2).data(dadosAtualizados.cnpj || "Não informado");
                    table.cell(rowIdx, 3).data(dadosAtualizados.email || "Não informado");
                    table.cell(rowIdx, 4).data(dadosAtualizados.telefone || "Não informado");
                    table.cell(rowIdx, 5).data(dadosAtualizados.cep || "Não informado");
                    table.cell(rowIdx, 9).data(dadosAtualizados.numeroRua || "Não informado");
                    table.cell(rowIdx, 10).data(dadosAtualizados.complemento || "Não informado");

                    $btn.text('Editar');
                    $row.find('.btn-cancelar').remove();
                    window.location.reload();
                })
                .catch(err => {
                    console.error(err);
                    alert('Erro ao atualizar fornecedor.');
                });
        }
    });

    // Cancelar edição
    $('#tabela').on('click', '.btn-cancelar', function () {
        const $row = $(this).closest('tr');
        const $editarBtn = $row.find('.btn-editar');
        const rowIdx = table.row($row).index();

        const editableIndexes = [1, 2, 3, 4, 5, 9, 10];
        editableIndexes.forEach(i => {
            const originalVal = $row.find('td').eq(i).find('input').attr('value');
            table.cell(rowIdx, i).data(originalVal || "Não informado");
        });

        table.row(rowIdx).invalidate().draw(false);

        $editarBtn.text('Editar');
        $(this).remove();
    });
</script>

</html>